// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CredentialIssuanceRequest defines model for CredentialIssuanceRequest.
type CredentialIssuanceRequest struct {
	Credential CredentialIssuanceRequestCredential `json:"credential"`
	Options    CredentialIssuanceRequestOptions    `json:"options"`
}

// CredentialIssuanceRequestCredential defines model for CredentialIssuanceRequestCredential.
type CredentialIssuanceRequestCredential struct {
	Context           []string          `json:"@context"`
	CredentialSubject CredentialSubject `json:"credentialSubject"`
	ExpirationDate    string            `json:"expirationDate"`
	Id                string            `json:"id"`
	IssuanceDate      string            `json:"issuanceDate"`
	Issuer            CredentialIssuer  `json:"issuer"`
	Type              []string          `json:"type"`
}

// CredentialIssuanceRequestOptions defines model for CredentialIssuanceRequestOptions.
type CredentialIssuanceRequestOptions struct {
	Challenge        string           `json:"challenge"`
	Created          string           `json:"created"`
	CredentialStatus CredentialStatus `json:"credentialStatus"`
	Domain           string           `json:"domain"`
}

// CredentialIssuanceResponse defines model for CredentialIssuanceResponse.
type CredentialIssuanceResponse struct {
	VerifiableCredential VerifiableCredential `json:"verifiableCredential"`
}

// CredentialIssuer defines model for CredentialIssuer.
type CredentialIssuer struct {
	Id string `json:"id"`
}

// CredentialProof defines model for CredentialProof.
type CredentialProof struct {
	Challenge          string `json:"challenge"`
	Created            string `json:"created"`
	Domain             string `json:"domain"`
	Jws                string `json:"jws"`
	Nonce              string `json:"nonce"`
	ProofPurpose       string `json:"proofPurpose"`
	ProofValue         string `json:"proofValue"`
	Type               string `json:"type"`
	VerificationMethod string `json:"verificationMethod"`
}

// CredentialStatus defines model for CredentialStatus.
type CredentialStatus struct {
	Type string `json:"type"`
}

// CredentialSubject defines model for CredentialSubject.
type CredentialSubject map[string]interface{}

// TestServerID defines model for TestServerID.
type TestServerID struct {
	Language string `json:"language"`
	Name     string `json:"name"`
	Url      string `json:"url"`
}

// VerifiableCredential defines model for VerifiableCredential.
type VerifiableCredential struct {
	Context           []string          `json:"@context"`
	CredentialSubject CredentialSubject `json:"credentialSubject"`
	ExpirationDate    string            `json:"expirationDate"`
	Id                string            `json:"id"`
	IssuanceDate      string            `json:"issuanceDate"`
	Issuer            CredentialIssuer  `json:"issuer"`
	Proof             CredentialProof   `json:"proof"`
	Type              []string          `json:"type"`
}

// CredentialIssueJSONRequestBody defines body for CredentialIssue for application/json ContentType.
type CredentialIssueJSONRequestBody = CredentialIssuanceRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// IdentifySelf request
	IdentifySelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialIssueWithBody request with any body
	CredentialIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialIssue(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServerReady request
	ServerReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServerShutdown request
	ServerShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) IdentifySelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIdentifySelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialIssueRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CredentialIssue(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialIssueRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServerReady(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServerReadyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServerShutdown(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServerShutdownRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewIdentifySelfRequest generates requests for IdentifySelf
func NewIdentifySelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialIssueRequest calls the generic CredentialIssue builder with application/json body
func NewCredentialIssueRequest(server string, body CredentialIssueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialIssueRequestWithBody(server, "application/json", bodyReader)
}

// NewCredentialIssueRequestWithBody generates requests for CredentialIssue with any type of body
func NewCredentialIssueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credentials/issue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewServerReadyRequest generates requests for ServerReady
func NewServerReadyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServerShutdownRequest generates requests for ServerShutdown
func NewServerShutdownRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// IdentifySelfWithResponse request
	IdentifySelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentifySelfResponse, error)

	// CredentialIssueWithBodyWithResponse request with any body
	CredentialIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error)

	CredentialIssueWithResponse(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error)

	// ServerReadyWithResponse request
	ServerReadyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerReadyResponse, error)

	// ServerShutdownWithResponse request
	ServerShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerShutdownResponse, error)
}

type IdentifySelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestServerID
}

// Status returns HTTPResponse.Status
func (r IdentifySelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IdentifySelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialIssuanceResponse
}

// Status returns HTTPResponse.Status
func (r CredentialIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServerReadyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServerReadyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServerReadyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServerShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ServerShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServerShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// IdentifySelfWithResponse request returning *IdentifySelfResponse
func (c *ClientWithResponses) IdentifySelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*IdentifySelfResponse, error) {
	rsp, err := c.IdentifySelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIdentifySelfResponse(rsp)
}

// CredentialIssueWithBodyWithResponse request with arbitrary body returning *CredentialIssueResponse
func (c *ClientWithResponses) CredentialIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error) {
	rsp, err := c.CredentialIssueWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialIssueResponse(rsp)
}

func (c *ClientWithResponses) CredentialIssueWithResponse(ctx context.Context, body CredentialIssueJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialIssueResponse, error) {
	rsp, err := c.CredentialIssue(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCredentialIssueResponse(rsp)
}

// ServerReadyWithResponse request returning *ServerReadyResponse
func (c *ClientWithResponses) ServerReadyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerReadyResponse, error) {
	rsp, err := c.ServerReady(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServerReadyResponse(rsp)
}

// ServerShutdownWithResponse request returning *ServerShutdownResponse
func (c *ClientWithResponses) ServerShutdownWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServerShutdownResponse, error) {
	rsp, err := c.ServerShutdown(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServerShutdownResponse(rsp)
}

// ParseIdentifySelfResponse parses an HTTP response from a IdentifySelfWithResponse call
func ParseIdentifySelfResponse(rsp *http.Response) (*IdentifySelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IdentifySelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestServerID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCredentialIssueResponse parses an HTTP response from a CredentialIssueWithResponse call
func ParseCredentialIssueResponse(rsp *http.Response) (*CredentialIssueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialIssuanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServerReadyResponse parses an HTTP response from a ServerReadyWithResponse call
func ParseServerReadyResponse(rsp *http.Response) (*ServerReadyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServerReadyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseServerShutdownResponse parses an HTTP response from a ServerShutdownWithResponse call
func ParseServerShutdownResponse(rsp *http.Response) (*ServerShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServerShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
